#include <iostream>
#include <cstdlib>
struct node 
{
  int data;
  struct node *left;
  struct node *right;

};


struct node * new_node(int data)
{

  struct node *node = (struct node *) malloc(sizeof(struct node) );
  node->data = data;
  node->left = NULL;
  node->right =NULL;

  return node;

}


struct node * insert ( struct node * , int );
void inorder(struct node * );
int sum_till_kth_elem(struct node *  , int & ,int , int & );


int main()
{

  int i = 0;
  //struct node * root = NULL;
  int data = 0;

    /* Let us create following BST
              50
           /     \
          30      70
         /  \    /  \
       20   40  60   80 */
    struct node *root = NULL;
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);
    insert(root, 75);
    insert(root, 90); 
  
    // print inoder traversal of the BST
    inorder(root);

     int count = 0;
     int key = 6;
     int sum = 0;
     std::cout << "\n hurray  sum ==== " << sum_till_kth_elem(root, count,key , sum );


 
}


struct node * insert ( struct node *node  , int data)
{
  static struct node * root  = node ;
  
  if(root ==NULL)
  {
   root= new_node( data);
   node = root;
  return root ;

  }

  if(node ==NULL)
  return new_node(data)  ;

  

  if( data > (node)->data)
  {
    
    (node)->right = insert( (node)->right , data);

  }

  if( data <  (node)->data)
  {
   (node)->left = insert(  (node)->left , data);

  } 
   
  
  return node;
}
  
 





void inorder(struct node * node)
{

  if(node ==NULL) //DOnt put node->next= Null bcaouse when its reaches to 5 then since its deosnt have any child sto its revert back to node(node->rihgt) and it will not get printted

   return ;

   inorder(node->left);
   std::cout << " " << node->data;
   inorder(node->right);

}
 



int sum_till_kth_elem(struct node *  node , int &count ,int key, int &sum )
{

  if(node ==NULL)
   {
    if(count!=key)
     return 0;
    else
     return 1;

   }

  int found =   sum_till_kth_elem (node->left , count , key , sum);


  if( found == 0)

  {

   if(count != key)
    {
      sum = sum + node->data;
      count++;

    }

     if(count ==key)
     {
    //  sum = sum +  node->data;
      return sum;

      }

    sum_till_kth_elem( node->right , count , key , sum ) ;

  }



}
